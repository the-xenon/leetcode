/*
https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray/description/

You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:

    If x is a negative integer, then abs(x) = -x.
    If x is a non-negative integer, then abs(x) = x.
 */

public class n1749_MaxAbsoluteSum {
    public static void main(String[] args) {
        new n1749_MaxAbsoluteSum().run();
    }

    public void run() {
        System.out.println(maxAbsoluteSum(new int[]{2, 3, -8, 7, -1, 2, 3}));
        System.out.println(maxAbsoluteSum(new int[]{-2, -4}));
        System.out.println(maxAbsoluteSum(new int[]{5, 4, 1, 7, 8}));


        System.out.println(maxAbsoluteSum(new int[]{1,-3,2,3,-4}));
        System.out.println(maxAbsoluteSum(new int[]{2,-5,1,-4,3,-2}));
        System.out.println(maxAbsoluteSum(new int[]{-8674,602,-9595,1164,1308,-5250,-4405,6287,2958,-6002,8399,-4276,-1367,-5818,4965,4003,2847,7596,-7830,4412,2895,1333,-4085,4134,-9976,-4073,-7133,5369,-845,-5446,126,2434,-7203,-164,81,-3534,-1177,-1174,-9498,454,284,-7928,1601,-4155,-7501,493,3010,6581,-829,168,-9591,-3283,-3574,-4226,-3214,-9628,4962,-5529,-9267,9137,-1399,-7813,-3657,-5488,8127,3938,-1318,-5997,8588,-4974,1407,4887,7294,9932,7000,-4692,-8420,5666,157,-7729,-6809,7763,-7436,-5893,7044,-9060,-828,-5463,7041,-3056,9561,-2038,-774,-8730,5855,3103,8123,4337,6513,8859,1030,-6171,-3804,-8305,9604,-1736,1684,-6874,-2365,-7190,679,1450,-6252,-580,3458,-7966,-9918,9271,8618,-8253,-1309,8749,-9460,-9548,-1619,443,4022,-7212,8369,-407,-5682,9198,-3982,4359,2639,8659,-5621,1579,-8322,-7549,-745,438,-7729,5682,-9663,5974,-1826,9986,-3703,-4768,-7796,2080,-9596,-6980,-9625,-5031,5873,-4238,-5631,-7578,-756,-2516,9462,3380,827,7630,2356,9270,-2361,9537,-7339,1471,-5505,-1602,-4663,-5603,7168,2976,-7071,-4240,-7714,3184,-537,-1257,5304,-3443,4212,3976,8631,8382,-1317,-5588,1855,-1488,6166,1631,-5121,-3674,-632,-784,-6129,-1124,-4699,1795,-34,-216,-8671,-7046,706,-8083,-4840,-231,-3031,-5175,-2603,-1174,1389,-3420,-3611,6309,-3278,3095,2421,2805,-7917,2871,-9790,-5291,4729,1869,9559,5927,-3340,-5895,-9503,751,-4080,4620,9587,2752,1603,-4619,2719,-2899,-8455,2904,8745,5666,3827,1962,-7949,-7275,-6799,8269,-2472,609,-2159,9161,-9775,7150,-3669,-1282,1590,8915,-8825,5424,-3464,-8429,3305,199,4184,5687,5701,7792,-1164,2779,-7862,8709,2280,7218,2763,2737,-8696,-5648,2559,5277,-838,-6350,804,-4704,-1764,-841,-1116,7581,-7341,2878,-4609,-4213,-5062,3146,4724,8406,-1471,8794,7563,-3080,-8862,7307,-9227,-2431,-2054,-3351,-6544,4975,7083,641,-3696,8369,-2430,2293,-659,-3905,-925,7578,-7680,4940,-9295,-1473,6630,-1914,-9133,-8727,2779,-3634,6624,6014,7414,2388,8366,-3824,8105,-7614,-853,-1662,-9860,8724,5722,7261,-5755,-878,-8328,5492,-4133,1714,7668,-5897,1910,-3327,3162,-6790,-3172,8893,-8781,-908,7195,9947,-6809,4276,6182,8504,-6461,-9778,3987,1082,2536,4191,-2446,-2021,-6860,6803,-5754,-9,7158,7786,8152,9612,-3135,1448,-2126,-30,-6406,-5707,-3029,-930,4960,6926,-1043,-1325,-6477,4696,-995,1451,-828,8651,8355,2382,837,-7263,6931,7401,-5619,5221,-3008,8821,-5906,-4854,1131,-9156,4205,9870,9482,-2751,3866,-2297,5611,-3542,5372,2747,6380,8618,-5842,5488,-2742,-4241,-2431,-7527,9300,-7889,-8952,2794,-2825,4891,2716,-8224,-6196,6412,7408,985,2558,7806,-8629,-521,-1202,1477,6423,261,-7870,-6642,5973,2984,-7407,2932,7906,7533,9206,6761,-7106,7347,8009,-7487,1425,4840,-6463,4062,2225,9631,17,-8041,4098,4185,1257,-4820,7074,613,6109,4815,-3627,-3435,-180,-2308,7362,7794,-4100,-2809,-1599,3568,2930,1395,90,141,6216,249,1333,-8663,3647,-3320,-9644,-8824,-9155,-9014,4134,2447,5203,897,-4317,-1448,-6583,-6660,6474,-8318,447,-3523,8798,-8740,4149,2964,5612,7177,3836,-2740,4791,8172,-7723,-1728,3130,-1267,2394,-8839,2104,-1853,7971,1219,-6829,7341,8380,2741,7470,1557,1649,8006,8195,7220,8793,-1300,4218,8069,2083,-760,-2461,-1018,-7454,5551,-5272,-4539,-6173,7425,-9914,-9338,2985,-9792,-1428,3037,5227,3621,-939,-6301,4844,-8428,-6377,3191,-776,-2728,-252,8899,-5618,-1697,784,-4940,-5928,-1544,1698,-1986,9127,8062,-9020,-2515,-1583,4279,3161,-5709,5196,-6623,41,-3287,-5474,-5156,9614,6140,-2721,8991,-8932,-4259,7328,5726,-7983,-7090,-3062,-4078,-4280,9716,3156,5498,8822,-9075,-9205,9138,-5533,-427,6690,3279,322,7442,6559,-2343,-6761,-85,7747,-2205,7988,-2264,-5671,1136,-6893,-161,1579,563,-4743,4270,-2542,-7721,6602,-3412,-6141,-1972,3603,-5932,-9517,-5482,1488,4889,5059,-7257,8174,-7811,-829,-5840,-8339,-144,-4497,-2761,-9221,256,4658,-5661,-1925,-5289,-2499,-9630,-9009,-7416,6251,-4801,-7976,-74,-2723,-7922,2188,6290,1744,4732,-7558,-8957,-377,-9053,-5880,-3828,-3297,9656,4056,-6544,5655,-5538,-8738,8080,6336,-3515,-3753,8812,-5936,-1316,-9728,-1402,-524,-7322,1392,6772,-2970,-3631,-2063,-1330,5008,3266,-7592,-2179,-5434,-7655,-9594,9267,4188,4085,-831,-1154,1342,1647,-2837,2944,4331,-9227,-3578,-6318,-3597,3289,-5997,5696,3618,6801,-5068,2798,2526,-2595,6919,3026,9859,8080,-3533,8521,-1921,1647,-8789,-7173,-8754,2406,-3277,-6355,-2293,-3839,-6123,7746,-6295,1076,9802,4121,-8730,-5922,7854,-7157,7504,6384,5152,-850,-4944,4117,-9542,-5383,-1548,-4484,396,4509,731,6366,6640,5362,-4603,-6944,1988,8830,-3789,7570,-7598,9995,-127,-6763,3239,-4266,234,1406,-5231,-6230,-400,294,-718,4696,6711,8451,5785,-4955,4105,-1637,1701,4647,-6840,5794,2577,3399,1488,1185,7194,-1904,-2776,-3943,-7703,-9540,-5996,-6487,1379,163,2318,-8334,-8044,860,-8092,-442,-8456,7151,-2239,6724,-372,-8469,9626,7854,2648,8361,6325,-3322,269,6264,-6505,-7642,-7039,-6432,8966,5947,2843,3952,-2593,5283,-5118,-7451,-8676,3199,6836,2567,1043,-8976,-8385,-4922,7286,-2534,-739,346,-675,9552,2853,8029,-8162,6731,5100,6399,6003,-1739,-3067,9828,8267,7543,-7063,-829,-5971,4287,2806,9280,-8410,-166,-1680,-674,1535,-6924,5365,-2757,9961,-4795,-7414,-3378,-7676,1701,6573,-9566,9887,2232,9142,-4145,634,2623,-258,-2643,-6886,7328,-1003,-569,-1444,8458,-9241,2211,-7402,-6717,4756,5748,1549,5342,9065,-3739,50,1022,-7701,6592,-5549,-581,7742,1851,-3002,4491,1648,-8289,5805,2185,3616,-2914,-2705,-4070,-2428,-9465,-4352,-3900,1008,8231,8956,3444,1941,-7234,-8191,5982,3857,2572,5020,5215,-7452,-8594,2326,-8964,8704,-9584,7906,-961,-7122,4076,-3659,198,-3115,-3552,-9967,-1386,3583,4350,5613,5997,9388,9389,-9770,7118,-6382,1100}));

//        Stats stats = Stats.start();
//        for (int i = 0; i < 1000000; i++) {
//            maxAbsoluteSum(new int[]{-8674, 602, -9595, 1164, 1308, -5250, -4405, 6287, 2958, -6002, 8399, -4276, -1367, -5818, 4965, 4003, 2847, 7596, -7830, 4412, 2895, 1333, -4085, 4134, -9976, -4073, -7133, 5369, -845, -5446, 126, 2434, -7203, -164, 81, -3534, -1177, -1174, -9498, 454, 284, -7928, 1601, -4155, -7501, 493, 3010, 6581, -829, 168, -9591, -3283, -3574, -4226, -3214, -9628, 4962, -5529, -9267, 9137, -1399, -7813, -3657, -5488, 8127, 3938, -1318, -5997, 8588, -4974, 1407, 4887, 7294, 9932, 7000, -4692, -8420, 5666, 157, -7729, -6809, 7763, -7436, -5893, 7044, -9060, -828, -5463, 7041, -3056, 9561, -2038, -774, -8730, 5855, 3103, 8123, 4337, 6513, 8859, 1030, -6171, -3804, -8305, 9604, -1736, 1684, -6874, -2365, -7190, 679, 1450, -6252, -580, 3458, -7966, -9918, 9271, 8618, -8253, -1309, 8749, -9460, -9548, -1619, 443, 4022, -7212, 8369, -407, -5682, 9198, -3982, 4359, 2639, 8659, -5621, 1579, -8322, -7549, -745, 438, -7729, 5682, -9663, 5974, -1826, 9986, -3703, -4768, -7796, 2080, -9596, -6980, -9625, -5031, 5873, -4238, -5631, -7578, -756, -2516, 9462, 3380, 827, 7630, 2356, 9270, -2361, 9537, -7339, 1471, -5505, -1602, -4663, -5603, 7168, 2976, -7071, -4240, -7714, 3184, -537, -1257, 5304, -3443, 4212, 3976, 8631, 8382, -1317, -5588, 1855, -1488, 6166, 1631, -5121, -3674, -632, -784, -6129, -1124, -4699, 1795, -34, -216, -8671, -7046, 706, -8083, -4840, -231, -3031, -5175, -2603, -1174, 1389, -3420, -3611, 6309, -3278, 3095, 2421, 2805, -7917, 2871, -9790, -5291, 4729, 1869, 9559, 5927, -3340, -5895, -9503, 751, -4080, 4620, 9587, 2752, 1603, -4619, 2719, -2899, -8455, 2904, 8745, 5666, 3827, 1962, -7949, -7275, -6799, 8269, -2472, 609, -2159, 9161, -9775, 7150, -3669, -1282, 1590, 8915, -8825, 5424, -3464, -8429, 3305, 199, 4184, 5687, 5701, 7792, -1164, 2779, -7862, 8709, 2280, 7218, 2763, 2737, -8696, -5648, 2559, 5277, -838, -6350, 804, -4704, -1764, -841, -1116, 7581, -7341, 2878, -4609, -4213, -5062, 3146, 4724, 8406, -1471, 8794, 7563, -3080, -8862, 7307, -9227, -2431, -2054, -3351, -6544, 4975, 7083, 641, -3696, 8369, -2430, 2293, -659, -3905, -925, 7578, -7680, 4940, -9295, -1473, 6630, -1914, -9133, -8727, 2779, -3634, 6624, 6014, 7414, 2388, 8366, -3824, 8105, -7614, -853, -1662, -9860, 8724, 5722, 7261, -5755, -878, -8328, 5492, -4133, 1714, 7668, -5897, 1910, -3327, 3162, -6790, -3172, 8893, -8781, -908, 7195, 9947, -6809, 4276, 6182, 8504, -6461, -9778, 3987, 1082, 2536, 4191, -2446, -2021, -6860, 6803, -5754, -9, 7158, 7786, 8152, 9612, -3135, 1448, -2126, -30, -6406, -5707, -3029, -930, 4960, 6926, -1043, -1325, -6477, 4696, -995, 1451, -828, 8651, 8355, 2382, 837, -7263, 6931, 7401, -5619, 5221, -3008, 8821, -5906, -4854, 1131, -9156, 4205, 9870, 9482, -2751, 3866, -2297, 5611, -3542, 5372, 2747, 6380, 8618, -5842, 5488, -2742, -4241, -2431, -7527, 9300, -7889, -8952, 2794, -2825, 4891, 2716, -8224, -6196, 6412, 7408, 985, 2558, 7806, -8629, -521, -1202, 1477, 6423, 261, -7870, -6642, 5973, 2984, -7407, 2932, 7906, 7533, 9206, 6761, -7106, 7347, 8009, -7487, 1425, 4840, -6463, 4062, 2225, 9631, 17, -8041, 4098, 4185, 1257, -4820, 7074, 613, 6109, 4815, -3627, -3435, -180, -2308, 7362, 7794, -4100, -2809, -1599, 3568, 2930, 1395, 90, 141, 6216, 249, 1333, -8663, 3647, -3320, -9644, -8824, -9155, -9014, 4134, 2447, 5203, 897, -4317, -1448, -6583, -6660, 6474, -8318, 447, -3523, 8798, -8740, 4149, 2964, 5612, 7177, 3836, -2740, 4791, 8172, -7723, -1728, 3130, -1267, 2394, -8839, 2104, -1853, 7971, 1219, -6829, 7341, 8380, 2741, 7470, 1557, 1649, 8006, 8195, 7220, 8793, -1300, 4218, 8069, 2083, -760, -2461, -1018, -7454, 5551, -5272, -4539, -6173, 7425, -9914, -9338, 2985, -9792, -1428, 3037, 5227, 3621, -939, -6301, 4844, -8428, -6377, 3191, -776, -2728, -252, 8899, -5618, -1697, 784, -4940, -5928, -1544, 1698, -1986, 9127, 8062, -9020, -2515, -1583, 4279, 3161, -5709, 5196, -6623, 41, -3287, -5474, -5156, 9614, 6140, -2721, 8991, -8932, -4259, 7328, 5726, -7983, -7090, -3062, -4078, -4280, 9716, 3156, 5498, 8822, -9075, -9205, 9138, -5533, -427, 6690, 3279, 322, 7442, 6559, -2343, -6761, -85, 7747, -2205, 7988, -2264, -5671, 1136, -6893, -161, 1579, 563, -4743, 4270, -2542, -7721, 6602, -3412, -6141, -1972, 3603, -5932, -9517, -5482, 1488, 4889, 5059, -7257, 8174, -7811, -829, -5840, -8339, -144, -4497, -2761, -9221, 256, 4658, -5661, -1925, -5289, -2499, -9630, -9009, -7416, 6251, -4801, -7976, -74, -2723, -7922, 2188, 6290, 1744, 4732, -7558, -8957, -377, -9053, -5880, -3828, -3297, 9656, 4056, -6544, 5655, -5538, -8738, 8080, 6336, -3515, -3753, 8812, -5936, -1316, -9728, -1402, -524, -7322, 1392, 6772, -2970, -3631, -2063, -1330, 5008, 3266, -7592, -2179, -5434, -7655, -9594, 9267, 4188, 4085, -831, -1154, 1342, 1647, -2837, 2944, 4331, -9227, -3578, -6318, -3597, 3289, -5997, 5696, 3618, 6801, -5068, 2798, 2526, -2595, 6919, 3026, 9859, 8080, -3533, 8521, -1921, 1647, -8789, -7173, -8754, 2406, -3277, -6355, -2293, -3839, -6123, 7746, -6295, 1076, 9802, 4121, -8730, -5922, 7854, -7157, 7504, 6384, 5152, -850, -4944, 4117, -9542, -5383, -1548, -4484, 396, 4509, 731, 6366, 6640, 5362, -4603, -6944, 1988, 8830, -3789, 7570, -7598, 9995, -127, -6763, 3239, -4266, 234, 1406, -5231, -6230, -400, 294, -718, 4696, 6711, 8451, 5785, -4955, 4105, -1637, 1701, 4647, -6840, 5794, 2577, 3399, 1488, 1185, 7194, -1904, -2776, -3943, -7703, -9540, -5996, -6487, 1379, 163, 2318, -8334, -8044, 860, -8092, -442, -8456, 7151, -2239, 6724, -372, -8469, 9626, 7854, 2648, 8361, 6325, -3322, 269, 6264, -6505, -7642, -7039, -6432, 8966, 5947, 2843, 3952, -2593, 5283, -5118, -7451, -8676, 3199, 6836, 2567, 1043, -8976, -8385, -4922, 7286, -2534, -739, 346, -675, 9552, 2853, 8029, -8162, 6731, 5100, 6399, 6003, -1739, -3067, 9828, 8267, 7543, -7063, -829, -5971, 4287, 2806, 9280, -8410, -166, -1680, -674, 1535, -6924, 5365, -2757, 9961, -4795, -7414, -3378, -7676, 1701, 6573, -9566, 9887, 2232, 9142, -4145, 634, 2623, -258, -2643, -6886, 7328, -1003, -569, -1444, 8458, -9241, 2211, -7402, -6717, 4756, 5748, 1549, 5342, 9065, -3739, 50, 1022, -7701, 6592, -5549, -581, 7742, 1851, -3002, 4491, 1648, -8289, 5805, 2185, 3616, -2914, -2705, -4070, -2428, -9465, -4352, -3900, 1008, 8231, 8956, 3444, 1941, -7234, -8191, 5982, 3857, 2572, 5020, 5215, -7452, -8594, 2326, -8964, 8704, -9584, 7906, -961, -7122, 4076, -3659, 198, -3115, -3552, -9967, -1386, 3583, 4350, 5613, 5997, 9388, 9389, -9770, 7118, -6382, 1100});
//        }
//        stats.show();

    }

    public int maxAbsoluteSum(int[] nums) {
        int len = nums.length;
        int sum = nums[0], max = nums[0];
        int sum2 = nums[0], min = nums[0];
        int n;
        for (int i = 1; i < len; i++) {
            n = nums[i];
            sum = (sum < 0) ?  n : sum + n;
            if (sum > max) {
                max = sum;
            }
            sum2 = (sum2 > 0) ?  n : sum2 + n;
            if (sum2 < min) {
                min = sum2;
            }
        }
        return (max > -min) ? max : -min;
    }

    public int maxAbsoluteSum4(int[] nums) {
        //int len = nums.length;
        int sum = -1, max = nums[0];
        int sum2 = 1, min = nums[0];
        for (int n : nums) {
            sum = (sum < 0) ?  n : sum + n;
            if (sum > max) {
                max = sum;
            }
            sum2 = (sum2 > 0) ?  n : sum2 + n;
            if (sum2 < min) {
                min = sum2;
            }
        }

        return Math.max(max, -min);
    }

    public int maxAbsoluteSum3(int[] nums) {
        int len = nums.length;
        int sum, abs,  max = 0;
        int k;
        for (int i = 0; i < len; i++) {
            k = i; sum = 0;
            while (k < len) {
                sum += nums[k++];
                abs = Math.abs(sum);
                if (abs > max) {
                    max = abs;
                }
            }
        }
        return max;
    }

    public int maxAbsoluteSum2(int[] nums) {
        int sum = 0;
        for (int n : nums) {
            sum += n;
        }
        return runArr(nums, 0, nums.length - 1, sum);
    }

    private int runArr(int[] nums, int s, int e, int sum) {
        if (s == e) {
            return Math.abs(nums[s]);
        }
        int ss;
        ss = sum - nums[s];
        int max1 = runArr(nums, s + 1, e, ss);
        ss = sum - nums[e];
        int max2= runArr(nums, s, e - 1, ss);
        return Math.max(Math.abs(sum), Math.max(Math.abs(max1), Math.abs(max2)));
    }
}
